{"version":3,"sources":["images/head_shot.jpg","components/sidebar/Sidebar.js","components/calendar/Calendar.js","components/resume/Resume.js","components/container/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","navData","Sidebar","useState","document","documentElement","clientHeight","documentHeight","setDocumentHeight","useEffect","window","addEventListener","body","scrollHeight","className","style","height","src","HeadShot","alt","map","item","i","key","Calendar","Date","date","setDate","day","getDate","year","getFullYear","month","getMonth","weekday","getDay","nowTime","toTimeString","split","timer","setInterval","clearInterval","Resume","Container","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,uC,8NCIrCC,G,MAAU,CAAE,SAAU,YAAa,gBAAiB,gBAoC3CC,EAlCC,WAAO,IAAD,EAE0BC,mBAASC,SAASC,gBAAgBC,cAF5D,mBAEXC,EAFW,KAEKC,EAFL,KAUlB,OANAC,qBAAU,WACNC,OAAOC,iBAAiB,QAAQ,WAC5BH,EAAkBJ,SAASQ,KAAKC,oBAKpC,yBAAKC,UAAU,kBAAkBC,MAAO,CAAEC,OAAQT,EAAiB,GAAM,OACrE,yBAAKO,UAAU,WACX,yBAAKA,UAAU,SACX,yBAAKG,IAAKC,IAAUC,IAAI,UAE5B,yBAAKL,UAAU,SACX,sCACA,sFAEJ,yBAAKA,UAAU,OACX,4BACKb,EAAQmB,KAAI,SAACC,EAAMC,GAChB,OAAO,wBAAIC,IAAKD,GACJ,gCAASD,YCclCG,G,MAzCE,WAEb,IAFmB,EAIGrB,mBAAS,IAAIsB,MAJhB,mBAIdC,EAJc,KAIRC,EAJQ,KAKbC,EAAMF,EAAKG,UACXC,EAAOJ,EAAKK,cACZC,EAAQN,EAAKO,WAAa,EAC1BC,EAAUR,EAAKS,SACfC,EAAUV,EAAKW,eAAeC,MAAM,KAAK,GAS/C,OAPA7B,qBAAU,WACN,IAAI8B,EAAQC,aAAY,WACpBb,EAAQ,IAAIF,QACb,KACH,OAAO,kBAAMgB,cAAcF,MAC5B,CAACb,IAGA,yBAAKZ,UAAU,oBACX,yBAAKA,UAAU,SACX,2CAEJ,yBAAKA,UAAU,YACX,yBAAKA,UAAU,QACX,8BAAOgB,IAEX,yBAAKhB,UAAU,QACX,8BAAOkB,EAAP,MAAiBJ,IAErB,yBAAKd,UAAU,WACX,8BA7BH,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YA6BpDoB,KAEhB,yBAAKpB,UAAU,YACX,8BAAOsB,QCxBZM,G,MARA,WACX,OACI,yBAAK5B,UAAU,kBAAf,YCSO6B,G,MAXG,WAGd,OACI,yBAAK7B,UAAU,qBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,S,MCGG8B,MATf,WACI,OACI,yBAAK9B,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCGQ+B,QACW,cAA7BnC,OAAOoC,SAASC,UAEe,UAA7BrC,OAAOoC,SAASC,UAEhBrC,OAAOoC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF/C,SAASgD,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3f0c1c31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/head_shot.43ff87f9.jpg\";","import React, { useEffect, useState } from 'react';\r\nimport HeadShot from '../../images/head_shot.jpg';\r\nimport '../../scss/sidebar.scss';\r\n\r\nconst navData = [ 'Resume', 'Todo List', 'PomodoroTimer', 'Seadch(API)'];\r\n\r\nconst Sidebar = () => {\r\n\r\n    const [documentHeight, setDocumentHeight] = useState(document.documentElement.clientHeight);\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('load', () => {\r\n            setDocumentHeight(document.body.scrollHeight);\r\n        })\r\n    })\r\n\r\n    return (\r\n        <div className=\"sidebar_wrapper\" style={{ height: documentHeight - 0.1 + 'px' }}>\r\n            <div className=\"sidebar\">\r\n                <div className=\"photo\">\r\n                    <img src={HeadShot} alt=\"isME\"></img>\r\n                </div>\r\n                <div className=\"title\">\r\n                    <h2>Daniel</h2>\r\n                    <p>來自高雄的熱血男子</p>\r\n                </div>\r\n                <div className=\"nav\">\r\n                    <ul>\r\n                        {navData.map((item, i) => {\r\n                            return <li key={i}>\r\n                                        <button>{item}</button>\r\n                                    </li>\r\n                        })}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar;","import React, { useState, useEffect } from 'react';\r\nimport '../../scss/calendar.scss';\r\n\r\nconst Calendar = () => {\r\n\r\n    const week = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n\r\n    let [date, setDate] = useState(new Date());\r\n    const day = date.getDate();\r\n    const year = date.getFullYear();\r\n    const month = date.getMonth() + 1;\r\n    const weekday = date.getDay();\r\n    const nowTime = date.toTimeString().split(' ')[0];\r\n\r\n    useEffect(() => {\r\n        let timer = setInterval(() => {\r\n            setDate(new Date());\r\n        }, 1000);\r\n        return () => clearInterval(timer);\r\n    }, [date]);\r\n\r\n    return (\r\n        <div className=\"calendar_wrapper\">\r\n            <div className=\"title\">\r\n                <span>CALENDAR</span>\r\n            </div>\r\n            <div className=\"calendar\">\r\n                <div className=\"year\">\r\n                    <span>{year}</span>\r\n                </div>\r\n                <div className=\"date\">\r\n                    <span>{month} / {day}</span>\r\n                </div>\r\n                <div className=\"weekday\">\r\n                    <span>{week[weekday]}</span>\r\n                </div>\r\n                <div className=\"time_now\">\r\n                    <span>{nowTime}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calendar;","import React from 'react';\r\nimport '../../scss/resume.scss';\r\n\r\n\r\n\r\nconst Resume = () => {\r\n    return (\r\n        <div className=\"resume_wrapper\">\r\n            Resume\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Resume;","import React from 'react';\r\nimport Calender from '../calendar/Calendar';\r\nimport Resume from '../resume/Resume';\r\nimport '../../scss/container.scss';\r\n\r\nconst Container = () => {\r\n    \r\n\r\n    return (\r\n        <div className=\"container_wrapper\">\r\n            <Calender />\r\n            <Resume />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Container;","import React from 'react';\nimport Sidebar from './components/sidebar/Sidebar';\nimport Container from './components/container/Container';\nimport './scss/app.scss';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Sidebar />\n            <Container />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}